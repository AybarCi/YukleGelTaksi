import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  FlatList,
  Dimensions,
  Modal,
  ScrollView,
  TextInput,
  Linking,
  Image,
  Alert,
} from 'react-native';
import { useAuth } from '../contexts/AuthContext';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { Ionicons, MaterialIcons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import MapView, { Marker, Polyline, PROVIDER_GOOGLE } from 'react-native-maps';
import * as Location from 'expo-location';
import { API_CONFIG } from '../config/api';
import socketService from '../services/socketService';
import { styles } from './driver-dashboard.styles';
import { PhotoModal } from '../components/PhotoModal';
import OrderInspectionModal from '../components/OrderInspectionModal';
import NewOrderNotificationModal from '../components/NewOrderNotificationModal';
import OrderCancellationModal from '../components/OrderCancellationModal';

import { Header } from '../components/driver-dashboard/Header';
import MapComponent from '../components/driver-dashboard/MapComponent';
import { ActiveOrderCard } from '../components/driver-dashboard/ActiveOrderCard';
import { default as CustomerList } from '../components/driver-dashboard/CustomerList';
import { DriverInfo as DashboardDriverInfo, OrderData as DashboardOrderData, LocationCoords, MapRegion } from '../types/dashboard';
import ToggleButton from '../components/ToggleButton';
import { navigationService, NavigationUpdate } from '../services/navigationService';

const { width, height } = Dimensions.get('window');

interface Customer {
  id: number;
  name: string;
  phone: string;
  pickup_location: string;
  destination: string;
  distance: string;
  estimated_fare: number;
  status: 'pending' | 'waiting' | 'driver_accepted_awaiting_customer' | 'accepted' | 'confirmed' | 'in_progress' | 'completed' | 'inspecting' | 'rejected' | 'timeout';
  created_at: string;
  countdownTime?: number; // Geri sayƒ±m s√ºresi (milisaniye)
  countdownTotal?: number; // Toplam s√ºre (milisaniye)
}

interface DriverInfo {
  id: number;
  first_name: string;
  last_name: string;
  phone_number: string;
  is_active: boolean;
}

interface OrderData {
  id: number;
  pickupAddress: string;
  pickupLatitude: number;
  pickupLongitude: number;
  destinationAddress: string;
  destinationLatitude: number;
  destinationLongitude: number;
  laborCount: number;
  estimatedPrice: number;
  customerId: number;
  customerName?: string;
  customerPhone?: string;
  customer_first_name?: string;
  customer_last_name?: string;
  distance?: number;
  estimatedArrival?: number;
  cargo_photo_urls?: string;
}

interface RoutePhase {
  type: 'pickup' | 'delivery';
  destination: {
    latitude: number;
    longitude: number;
    address: string;
  };
}

export default function DriverDashboardScreen() {
  const { showModal, logout, token } = useAuth();
  const [driverInfo, setDriverInfo] = useState<DriverInfo | null>(null);
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [isOnline, setIsOnline] = useState(false);
  const [currentLocation, setCurrentLocation] = useState({
    latitude: 41.0082,
    longitude: 28.9784,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });

  const [showInspectionModal, setShowInspectionModal] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Customer | null>(null);
  const [inspectingOrders, setInspectingOrders] = useState<Set<number>>(new Set());
  const [orderDetails, setOrderDetails] = useState<any>(null);
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [laborCount, setLaborCount] = useState('1');
  const [laborPrice, setLaborPrice] = useState(800); // Default deƒüer pricing_settings tablosundan
  const [isRefreshing, setIsRefreshing] = useState(false);
  
  // Yeni sipari≈ü bildirim modal state'leri
  const [showNewOrderModal, setShowNewOrderModal] = useState(false);
  const [newOrderData, setNewOrderData] = useState<OrderData | null>(null);
  
  // Sipari≈ü iptali modal state'leri
  const [showCancellationModal, setShowCancellationModal] = useState(false);
  const [cancellationData, setCancellationData] = useState<{
    orderId: number;
    message?: string;
    customerName?: string;
    pickupAddress?: string;
    destinationAddress?: string;
  } | null>(null);
  
  // Fotoƒüraf modal state'leri
  const [photoModalVisible, setPhotoModalVisible] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [photoUrls, setPhotoUrls] = useState<string[]>([]);
  
  // Navigasyon servisi ve state'leri
  const [navigationUpdate, setNavigationUpdate] = useState<NavigationUpdate | null>(null);
  
  const locationWatchRef = useRef<Location.LocationSubscription | null>(null);
  
  // Fotoƒüraf slider fonksiyonlarƒ±
  const openPhotoModal = (urls: string[], index: number = 0) => {
    setPhotoUrls(urls);
    setCurrentImageIndex(index);
    setPhotoModalVisible(true);
  };

  const closePhotoModal = () => {
    setPhotoModalVisible(false);
    setCurrentImageIndex(0);
    setPhotoUrls([]);
  };

  const handleImageIndexChange = (index: number) => {
    setCurrentImageIndex(index);
  };


  
  // A≈üamalƒ± rota sistemi i√ßin state'ler
  const [activeOrder, setActiveOrder] = useState<OrderData | null>(null);
  const [currentPhase, setCurrentPhase] = useState<'pickup' | 'delivery' | null>(null);
  const [isWaitingForCustomerApproval, setIsWaitingForCustomerApproval] = useState(false);
  const [pendingOrderId, setPendingOrderId] = useState<number | null>(null);
  const [pendingOrderDetails, setPendingOrderDetails] = useState<any>(null);
  const [routeCoordinates, setRouteCoordinates] = useState<{latitude: number, longitude: number}[]>([]);
  const [routeDuration, setRouteDuration] = useState<number | null>(null);
  const [isNavigating, setIsNavigating] = useState(false);
  const [mapRegion, setMapRegion] = useState({
    latitude: 41.0082,
    longitude: 28.9784,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const mapRef = useRef<MapView>(null);

  // Navigasyon durumu deƒüi≈ütiƒüinde cleanup
  useEffect(() => {
    if (!isNavigating && navigationService.isNavigating()) {
      console.log('üßπ Navigasyon durduruluyor (isNavigating false)');
      navigationService.stopNavigation();
    }
  }, [isNavigating]);

  // Aktif sipari≈ü deƒüi≈ütiƒüinde navigasyonu temizle
  useEffect(() => {
    if (!activeOrder && isNavigating) {
      console.log('üßπ Aktif sipari≈ü yok, navigasyon durduruluyor');
      navigationService.stopNavigation();
      setIsNavigating(false);
      setNavigationUpdate(null);
    }
  }, [activeOrder, isNavigating]);
  useEffect(() => {
    return () => {
      console.log('üßπ Component unmount, navigasyon temizleniyor...');
      navigationService.stopNavigation();
      setIsNavigating(false);
    };
  }, []);

  // Navigasyon durumu deƒüi≈ütiƒüinde cleanup
  const handlePickupComplete = (orderId: number) => {
    console.log('Pickup completed for order:', orderId);
    setCurrentPhase('delivery');
    // API call to update order status
  };

  // Handle delivery complete function
  const handleDeliveryComplete = (orderId: number) => {
    console.log('Delivery completed for order:', orderId);
    setActiveOrder(null);
    setCurrentPhase(null);
    // API call to complete order
  };

  useEffect(() => {
    loadDriverInfo();
    loadCustomers();
    requestLocationPermission();
    fetchLaborPrice();
    
    // Socket baƒülantƒ±sƒ±nƒ± kur - sadece s√ºr√ºc√º √ßevrimi√ßiyse
    if (token) {
      // AsyncStorage'dan son online durumunu kontrol et
      AsyncStorage.getItem('driver_online_status').then(savedStatus => {
        const shouldBeOnline = savedStatus === 'true';
        console.log('üîå Driver online status:', shouldBeOnline);
        setIsOnline(shouldBeOnline); // Online durumunu hemen set et
        if (shouldBeOnline) {
          console.log('üîå Connecting socket for driver...');
          socketService.connect(token);
          
          // Baƒülantƒ± durumunu kontrol et
          setTimeout(() => {
            console.log('üîå Socket connection status after connect:', socketService.isSocketConnected());
            console.log('üîå Socket ID after connect:', socketService.getSocketId());
          }, 2000);
        }
      });
      
      // Socket baƒülantƒ± durumu event'lerini dinle
      socketService.on('connection_error', (data: any) => {
        console.log('üîî CONNECTION ERROR Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('‚ùå Socket baƒülantƒ± hatasƒ±:', JSON.stringify(data, null, 2));
        console.log('üîå Baƒülantƒ± durumu:', socketService.isSocketConnected());
        showModal('Baƒülantƒ± Hatasƒ±', 'Sunucu ile baƒülantƒ± kurulamadƒ±. L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin.', 'error');
      });

      socketService.on('max_reconnect_attempts_reached', () => {
        console.log('üîî MAX RECONNECT ATTEMPTS Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('‚ùå Maksimum yeniden baƒülanma denemesi a≈üƒ±ldƒ±');
        console.log('üîå Socket durumu:', socketService.isSocketConnected());
        console.log('üÜî Socket ID:', socketService.getSocketId());
        showModal('Baƒülantƒ± Sorunu', 'Sunucu ile baƒülantƒ± kurulamƒ±yor. L√ºtfen uygulamayƒ± yeniden ba≈ülatƒ±n.', 'error');
      });
      
      // Socket event listener'larƒ± - sadece backend'ten gelen new_order_available event'ini dinle
      socketService.on('new_order_available', (orderData: OrderData) => {
        console.log('üîî NEW ORDER AVAILABLE Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Sipari≈ü Detaylarƒ±:', JSON.stringify(orderData, null, 2));
        console.log('üë§ M√º≈üteri:', orderData.customer_first_name, orderData.customer_last_name);
        console.log('üìç Alƒ±≈ü Adresi:', orderData.pickupAddress);
        console.log('üéØ Varƒ±≈ü Adresi:', orderData.destinationAddress);
        console.log('üí∞ Tahmini √úcret:', orderData.estimatedPrice);
        console.log('üìè Mesafe:', orderData.distance);

        console.log('üë∑ ƒ∞≈ü√ßi Sayƒ±sƒ±:', orderData.laborCount);
        
        // Yeni sipari≈ü bildirim modalƒ±nƒ± g√∂ster
        setNewOrderData(orderData);
        setShowNewOrderModal(true);
        
        // OrderData'yƒ± Customer formatƒ±na d√∂n√º≈üt√ºr
        const newCustomer: Customer = {
          id: orderData.id || Date.now(),
          name: orderData.customer_first_name && orderData.customer_last_name 
            ? `${orderData.customer_first_name} ${orderData.customer_last_name}` 
            : (orderData.customerName || 'M√º≈üteri'),
          phone: orderData.customerPhone || 'Bilinmiyor',
          pickup_location: orderData.pickupAddress,
          destination: orderData.destinationAddress,
          distance: orderData.distance ? `${orderData.distance.toFixed(1)} km` : 'Hesaplanƒ±yor...',
          estimated_fare: orderData.estimatedPrice,
          status: 'pending',
          created_at: new Date().toISOString(),
        };
        
        console.log('‚úÖ D√∂n√º≈üt√ºr√ºlen M√º≈üteri Verisi:', JSON.stringify(newCustomer, null, 2));
        
        // Yeni sipari≈üi customers listesine ekle
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          // Aynƒ± ID'li sipari≈ü varsa g√ºncelle, yoksa ekle
          const existingIndex = currentCustomers.findIndex(c => c.id === newCustomer.id);
          if (existingIndex >= 0) {
            const updated = [...currentCustomers];
            updated[existingIndex] = newCustomer;
            console.log('üîÑ Mevcut sipari≈ü g√ºncellendi:', newCustomer.id);
            return updated;
          } else {
            console.log('‚ûï Yeni sipari≈ü eklendi:', newCustomer.id);
            return [newCustomer, ...currentCustomers];
          }
        });
      });
      
      socketService.on('order_cancelled', (orderId: number) => {
        console.log('üîî ORDER CANCELLED Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üÜî ƒ∞ptal Edilen Sipari≈ü ID:', orderId);
        
        // ƒ∞ptal edilen sipari≈üi listeden kaldƒ±r
        setCustomers(prev => {
          const filtered = (prev || []).filter(customer => customer.id !== orderId);
          console.log('‚ùå Sipari≈ü listeden kaldƒ±rƒ±ldƒ±:', orderId);
          console.log('üìä Kalan sipari≈ü sayƒ±sƒ±:', filtered.length);
          return filtered;
        });
        
        // Eƒüer iptal edilen sipari≈ü aktif sipari≈ü ise, s√ºr√ºc√ºy√º ana ekrana getir
        if (activeOrder && activeOrder.id === orderId) {
          setActiveOrder(null);
          setCurrentPhase('pickup');
          setRouteCoordinates([]);
          setRouteDuration(null);
          console.log('üè† Aktif sipari≈ü iptal edildi, s√ºr√ºc√º ana ekrana getirildi');
        }
        
        // S√ºr√ºc√ºye bilgilendirme modalƒ± g√∂ster
        showModal('Sipari≈ü ƒ∞ptal Edildi', `#${orderId} numaralƒ± sipari≈ü m√º≈üteri tarafƒ±ndan iptal edildi.`, 'info');
      });

      // Sipari≈ü ba≈üarƒ±yla iptal edildiƒüinde (m√º≈üteri tarafƒ±ndan onay kodu ile)
      socketService.on('order_cancelled_successfully', (data: { orderId: number, message?: string }) => {
        console.log('üîî ORDER CANCELLED SUCCESSFULLY Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üÜî ƒ∞ptal Edilen Sipari≈ü ID:', data.orderId);
        console.log('üí¨ Mesaj:', data.message);
        
        // ƒ∞ptal edilen sipari≈üi listeden kaldƒ±r
        setCustomers(prev => {
          const filtered = (prev || []).filter(customer => customer.id !== data.orderId);
          console.log('‚ùå Sipari≈ü listeden kaldƒ±rƒ±ldƒ±:', data.orderId);
          console.log('üìä Kalan sipari≈ü sayƒ±sƒ±:', filtered.length);
          return filtered;
        });
        
        // Eƒüer iptal edilen sipari≈ü aktif sipari≈ü ise, s√ºr√ºc√ºy√º ana ekrana getir
        if (activeOrder && activeOrder.id === data.orderId) {
          setActiveOrder(null);
          setCurrentPhase('pickup');
          setRouteCoordinates([]);
          setRouteDuration(null);
          console.log('üè† Aktif sipari≈ü iptal edildi, s√ºr√ºc√º ana ekrana getirildi');
        }

        // ƒ∞nceleme modalƒ± a√ßƒ±ksa ve iptal edilen sipari≈ü bu sipari≈ü ise modalƒ± kapat
        if (selectedOrder && selectedOrder.id === data.orderId) {
          console.log('üö™ ƒ∞nceleme modalƒ± kapatƒ±lƒ±yor - sipari≈ü iptal edildi:', data.orderId);
          setShowInspectionModal(false);
          setSelectedOrder(null);
          setOrderDetails(null);
        }

        // ƒ∞nceleme listesinden de kaldƒ±r
        setInspectingOrders(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.orderId);
          console.log('üóëÔ∏è ƒ∞ptal edilen sipari≈ü inspectingOrders listesinden √ßƒ±karƒ±ldƒ±:', data.orderId);
          return newSet;
        });
      });

      // M√º≈üteri sipari≈ü iptal onayƒ± istediƒüinde (backend'ten gelen event)
      socketService.on('cancel_order_confirmation_required', (data: { orderId: number, message?: string }) => {
        console.log('üîî CANCEL ORDER CONFIRMATION REQUIRED Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üÜî ƒ∞ptal Onayƒ± ƒ∞stenen Sipari≈ü ID:', data.orderId);
        console.log('üí¨ Mesaj:', data.message);
        
        // ƒ∞ptal onayƒ± istenen sipari≈üi listeden kaldƒ±r
        setCustomers(prev => {
          const filtered = (prev || []).filter(customer => customer.id !== data.orderId);
          console.log('‚ùå Sipari≈ü listeden kaldƒ±rƒ±ldƒ± (iptal onayƒ± istendi):', data.orderId);
          console.log('üìä Kalan sipari≈ü sayƒ±sƒ±:', filtered.length);
          return filtered;
        });
        
        // ƒ∞ptal onayƒ± istenen sipari≈ü bilgilerini al ve modal g√∂ster
        const orderToCancel = customers?.find(customer => customer.id === data.orderId);
        if (orderToCancel) {
          setCancellationData({
            orderId: data.orderId,
            message: data.message || 'M√º≈üteri sipari≈ü iptal onayƒ± istiyor',
            customerName: orderToCancel.name,
            pickupAddress: orderToCancel.pickup_location,
            destinationAddress: orderToCancel.destination
          });
          setShowCancellationModal(true);
        } else {
          // Sipari≈ü bulunamazsa genel bilgilendirme modalƒ± g√∂ster
          showModal('ƒ∞ptal Onayƒ±', data.message || `#${data.orderId} numaralƒ± sipari≈ü i√ßin iptal onayƒ± isteniyor.`, 'info');
        }
      });

      // M√º≈üteri sipari≈üi iptal ettiƒüinde (backend'ten gelen event)
      socketService.on('order_cancelled_by_customer', (data: { orderId: number, message?: string }) => {
        console.log('üîî ORDER CANCELLED BY CUSTOMER Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üÜî ƒ∞ptal Edilen Sipari≈ü ID:', data.orderId);
        console.log('üí¨ Mesaj:', data.message);
        
        // ƒ∞ptal edilen sipari≈üi listeden kaldƒ±r
        setCustomers(prev => {
          const filtered = (prev || []).filter(customer => customer.id !== data.orderId);
          console.log('‚ùå Sipari≈ü listeden kaldƒ±rƒ±ldƒ± (m√º≈üteri iptal etti):', data.orderId);
          console.log('üìä Kalan sipari≈ü sayƒ±sƒ±:', filtered.length);
          return filtered;
        });
        
        // ƒ∞ptal edilen sipari≈ü bilgilerini al ve modal g√∂ster
        const cancelledOrder = customers?.find(customer => customer.id === data.orderId);
        if (cancelledOrder) {
          setCancellationData({
            orderId: data.orderId,
            message: data.message || 'M√º≈üteri sipari≈üi iptal etti',
            customerName: cancelledOrder.name,
            pickupAddress: cancelledOrder.pickup_location,
            destinationAddress: cancelledOrder.destination
          });
          setShowCancellationModal(true);
        }
        
        // Eƒüer iptal edilen sipari≈ü aktif sipari≈ü ise, s√ºr√ºc√ºy√º ana ekrana getir
        if (activeOrder && activeOrder.id === data.orderId) {
          setActiveOrder(null);
          setCurrentPhase(null);
          setRouteCoordinates([]);
          setRouteDuration(null);
          console.log('üè† Aktif sipari≈ü iptal edildi (m√º≈üteri iptal etti), s√ºr√ºc√º idle durumuna getirildi');
        }

        // ƒ∞nceleme modalƒ± a√ßƒ±ksa ve iptal edilen sipari≈ü bu sipari≈ü ise modalƒ± kapat
        if (selectedOrder && selectedOrder.id === data.orderId) {
          console.log('üö™ ƒ∞nceleme modalƒ± kapatƒ±lƒ±yor - sipari≈ü m√º≈üteri tarafƒ±ndan iptal edildi:', data.orderId);
          setShowInspectionModal(false);
          setSelectedOrder(null);
          setOrderDetails(null);
        }

        // ƒ∞nceleme listesinden de kaldƒ±r
        setInspectingOrders(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.orderId);
          console.log('üóëÔ∏è ƒ∞ptal edilen sipari≈ü inspectingOrders listesinden √ßƒ±karƒ±ldƒ± (m√º≈üteri iptal etti):', data.orderId);
          return newSet;
        });

        // Kullanƒ±cƒ±ya bilgi mesajƒ± g√∂ster
        showModal('Sipari≈ü ƒ∞ptal Edildi', data.message || 'M√º≈üteri sipari≈üi iptal etti.', 'info');
      });
      
      // M√º≈üteri sipari≈üi onayladƒ±ƒüƒ±nda
      socketService.on('order_confirmed_by_customer', (data: { orderId: number, customerInfo: any }) => {
        console.log('üîî ORDER CONFIRMED Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Onay Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Onaylanan Sipari≈ü ID:', data.orderId);
        console.log('üë§ M√º≈üteri Bilgisi:', data.customerInfo);
        
        // Sipari≈ü durumunu g√ºncelle (listeden kaldƒ±rma)
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('‚úÖ Sipari≈ü durumu g√ºncellendi (m√º≈üteri onayladƒ±):', customer.id);
              return { ...customer, status: 'confirmed' as Customer['status'] };
            }
            return customer;
          });
          return updated;
        });
        
        // M√º≈üteri onayƒ± geldiƒüinde aktif sipari≈üi ba≈ülat
        startActiveOrderAfterCustomerApproval(data.orderId);
        
        // Ba≈üarƒ± mesajƒ± g√∂ster
        showModal('M√º≈üteri Onayƒ± Alƒ±ndƒ±', 'M√º≈üteri fiyatƒ± onayladƒ±. Y√ºk alma noktasƒ±na gitmeye ba≈ülayabilirsiniz.', 'success');
      });
      
      // M√º≈üteri sipari≈üi reddetti
      socketService.on('order_rejected_by_customer', (data: { orderId: number, reason?: string }) => {
        console.log('üîî ORDER REJECTED Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Red Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Reddedilen Sipari≈ü ID:', data.orderId);
        console.log('‚ùå Red Sebebi:', data.reason || 'Belirtilmemi≈ü');
        
        // Sipari≈ü durumunu g√ºncelle (listeden kaldƒ±rma)
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('‚ùå Sipari≈ü durumu g√ºncellendi (m√º≈üteri reddetti):', customer.id);
              return { ...customer, status: 'rejected' as Customer['status'] };
            }
            return customer;
          });
          return updated;
        });
        
        // Bilgilendirme mesajƒ± g√∂ster
        showModal('Sipari≈ü Reddedildi', 'M√º≈üteri sipari≈üi reddetti.', 'info');
      });

      // M√º≈üteri fiyat onayƒ±nƒ± kabul etti
      socketService.on('price_accepted_by_customer', (data: { orderId: number, message?: string }) => {
        console.log('üîî PRICE ACCEPTED BY CUSTOMER Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Fiyat Onayƒ± Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Onaylanan Sipari≈ü ID:', data.orderId);
        console.log('üí¨ Mesaj:', data.message || 'M√º≈üteri fiyatƒ± onayladƒ±');
        
        // Sipari≈ü durumunu g√ºncelle (listeden kaldƒ±rma)
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('‚úÖ Sipari≈ü durumu g√ºncellendi (fiyat onaylandƒ±):', customer.id);
              return { ...customer, status: 'confirmed' as Customer['status'] };
            }
            return customer;
          });
          return updated;
        });
        
        // ƒ∞nceleme modalƒ± a√ßƒ±ksa kapat
        if (selectedOrder && selectedOrder.id === data.orderId) {
          setShowInspectionModal(false);
          setSelectedOrder(null);
          setOrderDetails(null);
        }
        
        // ƒ∞nceleme listesinden kaldƒ±r
        setInspectingOrders(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.orderId);
          return newSet;
        });
        
        showModal('Fiyat Onayƒ±', 'M√º≈üteri fiyatƒ± onayladƒ±. Y√ºk alma noktasƒ±na gitmeye ba≈ülayabilirsiniz.', 'success');
      });

      // M√º≈üteri fiyat onayƒ±nƒ± reddetti
      socketService.on('price_rejected_by_customer', (data: { orderId: number, message?: string }) => {
        console.log('üîî PRICE REJECTED BY CUSTOMER Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Fiyat Reddi Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Reddedilen Sipari≈ü ID:', data.orderId);
        console.log('üí¨ Mesaj:', data.message || 'M√º≈üteri fiyatƒ± reddetti');
        
        // Sipari≈ü durumunu g√ºncelle (listeden kaldƒ±rma)
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('‚ùå Sipari≈ü durumu g√ºncellendi (fiyat reddedildi):', customer.id);
              return { ...customer, status: 'rejected' as Customer['status'] };
            }
            return customer;
          });
          return updated;
        });
        
        // ƒ∞nceleme modalƒ± a√ßƒ±ksa kapat
        if (selectedOrder && selectedOrder.id === data.orderId) {
          setShowInspectionModal(false);
          setSelectedOrder(null);
          setOrderDetails(null);
        }
        
        // ƒ∞nceleme listesinden kaldƒ±r
        setInspectingOrders(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.orderId);
          return newSet;
        });
        
        showModal('Fiyat Reddedildi', 'M√º≈üteri fiyatƒ± reddetti. Sipari≈ü iptal edildi.', 'info');
      });

      // M√º≈üteri fiyat onay s√ºresi doldu
      socketService.on('price_confirmation_timeout', (data: { orderId: number, message?: string }) => {
        console.log('üîî PRICE CONFIRMATION TIMEOUT Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Zaman A≈üƒ±mƒ± Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Zaman A≈üan Sipari≈ü ID:', data.orderId);
        console.log('üí¨ Mesaj:', data.message || 'M√º≈üteri onay s√ºresi doldu');
        
        // Sipari≈ü durumunu g√ºncelle (listeden kaldƒ±rma)
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('‚è∞ Sipari≈ü durumu g√ºncellendi (zaman a≈üƒ±mƒ±):', customer.id);
              return { ...customer, status: 'timeout' as Customer['status'], countdownTime: 0 };
            }
            return customer;
          });
          return updated;
        });
        
        // ƒ∞nceleme modalƒ± a√ßƒ±ksa kapat
        if (selectedOrder && selectedOrder.id === data.orderId) {
          setShowInspectionModal(false);
          setSelectedOrder(null);
          setOrderDetails(null);
        }
        
        // ƒ∞nceleme listesinden kaldƒ±r
        setInspectingOrders(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.orderId);
          return newSet;
        });
        
        showModal('Zaman A≈üƒ±mƒ±', data.message || 'M√º≈üteri onay s√ºresi doldu. Sipari≈ü tekrar m√ºsait duruma d√∂nd√º.', 'warning');
      });

      // Fiyat onayƒ± geri sayƒ±mƒ± ba≈ülatƒ±ldƒ±ƒüƒ±nda
      socketService.on('price_confirmation_countdown_started', (data: { orderId: number, timeout: number, message: string, countdownStartTime: number }) => {
        console.log('üîî PRICE CONFIRMATION COUNTDOWN STARTED Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Geri Sayƒ±m Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Sipari≈ü ID:', data.orderId);
        console.log('‚è∞ Zaman A≈üƒ±mƒ± S√ºresi:', data.timeout);
        console.log('üí¨ Mesaj:', data.message);
        console.log('üïê Geri Sayƒ±m Ba≈ülangƒ±√ß Zamanƒ±:', data.countdownStartTime);
        
        // ƒ∞lgili sipari≈üi customers listesinde g√ºncelle
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('üîÑ Sipari≈ü geri sayƒ±m durumuna ge√ßirildi:', customer.id);
              return { 
                ...customer, 
                status: 'driver_accepted_awaiting_customer' as Customer['status'],
                countdownTime: data.timeout,
                countdownTotal: data.timeout
              };
            }
            return customer;
          });
          return updated;
        });
      });

      // Fiyat onayƒ± geri sayƒ±m g√ºncellendiƒüinde
      socketService.on('price_confirmation_countdown_update', (data: { orderId: number, remainingTime: number, totalTime: number }) => {
        console.log('üîî PRICE CONFIRMATION COUNTDOWN UPDATE Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Geri Sayƒ±m G√ºncelleme Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Sipari≈ü ID:', data.orderId);
        console.log('‚è∞ Kalan S√ºre:', data.remainingTime);
        console.log('üìä Toplam S√ºre:', data.totalTime);
        
        // ƒ∞lgili sipari≈üi customers listesinde g√ºncelle
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('üîÑ Sipari≈ü geri sayƒ±mƒ± g√ºncellendi:', customer.id, 'Kalan s√ºre:', data.remainingTime);
              return { 
                ...customer, 
                countdownTime: data.remainingTime,
                countdownTotal: data.totalTime
              };
            }
            return customer;
          });
          return updated;
        });
      });

      // Sipari≈ü ba≈üarƒ±yla kabul edildiƒüinde
      socketService.on('order_accepted_success', (data: { orderId: number, message: string }) => {
        console.log('üîî ORDER ACCEPTED SUCCESS Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üÜî Kabul Edilen Sipari≈ü ID:', data.orderId);
        console.log('üí¨ Mesaj:', data.message);
        
        // Sipari≈ü durumunu g√ºncelle (listeden kaldƒ±rma)
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('‚úÖ Sipari≈ü durumu g√ºncellendi (kabul edildi):', customer.id);
              return { ...customer, status: 'accepted' as Customer['status'] };
            }
            return customer;
          });
          return updated;
        });
        
        // ƒ∞nceleme modalƒ± a√ßƒ±ksa kapat
        if (selectedOrder && selectedOrder.id === data.orderId) {
          setShowInspectionModal(false);
          setSelectedOrder(null);
          setOrderDetails(null);
        }
        
        // ƒ∞nceleme listesinden kaldƒ±r
        setInspectingOrders(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.orderId);
          return newSet;
        });
        
        showModal('Ba≈üarƒ±lƒ±', data.message, 'success');
      });

      // Sipari≈ü kabul edilirken hata olu≈ütuƒüunda
      socketService.on('order_accept_error', (data: { message: string }) => {
        console.log('üîî ORDER ACCEPT ERROR Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('‚ùå Hata Mesajƒ±:', data.message);
        
        showModal('Hata', data.message, 'error');
      });
      
      // Server konum g√ºncellemesi istediƒüinde mevcut konumu g√∂nder
      socketService.on('request_location_update', async () => {
        console.log('üîî LOCATION UPDATE REQUEST Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìç Server konum g√ºncellemesi istiyor, mevcut konum g√∂nderiliyor...');
        console.log('üó∫Ô∏è Mevcut Konum:', currentLocation);
        
        if (currentLocation) {
          socketService.updateLocation({
            latitude: currentLocation.latitude,
            longitude: currentLocation.longitude,
            heading: 0
          });
          console.log('‚úÖ Mevcut konum sunucuya g√∂nderildi:', currentLocation);
        } else {
          console.log('‚ùå Konum bilgisi yok, konum alƒ±nmaya √ßalƒ±≈üƒ±lƒ±yor...');
          // Konum bilgisi yoksa yeniden al
          try {
            const location = await Location.getCurrentPositionAsync({
              accuracy: Location.Accuracy.High,
            });
            const newLocation = {
              latitude: location.coords.latitude,
              longitude: location.coords.longitude,
              latitudeDelta: 0.0922,
              longitudeDelta: 0.0421,
            };
            setCurrentLocation(newLocation);
            socketService.updateLocation({
              latitude: location.coords.latitude,
              longitude: location.coords.longitude,
              heading: location.coords.heading || 0,
            });
            console.log('‚úÖ Yeni konum alƒ±ndƒ± ve sunucuya g√∂nderildi:', newLocation);
          } catch (error) {
            console.error('‚ùå Konum alƒ±nƒ±rken hata:', error);
          }
        }
      });
      
      // Sipari≈ü durumu g√ºncellemelerini dinle
      socketService.on('order_status_update', (data: { orderId: number, status: string }) => {
        console.log('üîî ORDER STATUS UPDATE Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Durum G√ºncelleme Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Sipari≈ü ID:', data.orderId);
        console.log('üìä Yeni Durum:', data.status);
        
        // ƒ∞lgili sipari≈üi customers listesinde g√ºncelle
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('üîÑ Sipari≈ü durumu g√ºncellendi:', customer.id, 'Eski:', customer.status, 'Yeni:', data.status);
              
              // Sipari≈ü iptal edildiyse bildirim g√∂ster
              if (data.status === 'cancelled') {
                Alert.alert(
                  'üì± Sipari≈ü ƒ∞ptal Edildi',
                  `Sipari≈ü #${data.orderId} m√º≈üteri tarafƒ±ndan iptal edildi.`,
                  [{ text: 'Tamam', style: 'default' }]
                );
              }
              
              return { ...customer, status: data.status as Customer['status'] };
            }
            return customer;
          });
          return updated;
        });
        
        // Sipari≈ü tamamlandƒ±ysa listeden kaldƒ±r
        if (data.status === 'completed' || data.status === 'cancelled') {
          setCustomers(prev => {
            const filtered = (prev || []).filter(customer => customer.id !== data.orderId);
            console.log('‚úÖ Tamamlanan/ƒ∞ptal edilen sipari≈ü listeden kaldƒ±rƒ±ldƒ±:', data.orderId);
            return filtered;
          });
        }
      });
      
      // Sipari≈ü faz g√ºncellemelerini dinle
      socketService.on('order_phase_update', (data: { orderId: number, currentPhase: 'pickup' | 'delivery', status: string }) => {
        console.log('üîî ORDER PHASE UPDATE Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Faz G√ºncelleme Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Sipari≈ü ID:', data.orderId);
        console.log('üîÑ Yeni Faz:', data.currentPhase);
        console.log('üìä Durum:', data.status);
        
        // Aktif sipari≈ü varsa ve ID e≈üle≈üiyorsa faz bilgisini g√ºncelle
        if (activeOrder && activeOrder.id === data.orderId) {
          setCurrentPhase(data.currentPhase);
          console.log('‚úÖ Aktif sipari≈ü fazƒ± g√ºncellendi:', data.currentPhase);
        } else {
          console.log('‚ÑπÔ∏è Faz g√ºncellemesi aktif sipari≈ü i√ßin deƒüil veya aktif sipari≈ü yok');
        }
      });
      
      // ƒ∞nceleme ba≈ülatƒ±ldƒ±ƒüƒ±nda sipari≈ü detaylarƒ±nƒ± al
      socketService.on('order_inspection_started', (data: { orderId: number, orderDetails: any }) => {
        console.log('üîî ORDER INSPECTION STARTED Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã ƒ∞nceleme Ba≈ülatma Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Sipari≈ü ID:', data.orderId);
        console.log('üìÑ Sipari≈ü Detaylarƒ±:', data.orderDetails);
        
        // Sipari≈ü detaylarƒ±nƒ± set et
        if (data.orderDetails) {
          setOrderDetails(data.orderDetails);
          console.log('üìÑ Sipari≈ü detaylarƒ± set edildi');
        }
        
        // ƒ∞nceleme ba≈üladƒ±ƒüƒ±nda inspectingOrders state'ini temizle
        // √á√ºnk√º artƒ±k sipari≈ü durumu 'inspecting' olacak
        setInspectingOrders(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.orderId);
          console.log('üóëÔ∏è ƒ∞nceleme ba≈üladƒ±, inspectingOrders listesinden √ßƒ±karƒ±ldƒ±:', data.orderId);
          return newSet;
        });
        
        // ƒ∞lgili sipari≈üi customers listesinde 'inspecting' durumuna g√ºncelle
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          
          // √ñnce mevcut sipari≈üi bul
          const existingOrder = currentCustomers.find(customer => customer.id === data.orderId);
          
          if (existingOrder) {
            console.log('‚úÖ Sipari≈ü customers listesinde bulundu:', data.orderId);
            
            // Sipari≈üi g√ºncelle
            const updated = currentCustomers.map(customer => {
              if (customer.id === data.orderId) {
                console.log('üîç Sipari≈ü inceleme durumuna ge√ßirildi:', customer.id);
                const updatedOrder = { ...customer, status: 'inspecting' as Customer['status'] };
                
                // Modal i√ßin selectedOrder'ƒ± set et
                setSelectedOrder(updatedOrder);
                setShowInspectionModal(true);
                console.log('üì± ƒ∞nceleme modalƒ± a√ßƒ±ldƒ±');
                
                return updatedOrder;
              }
              return customer;
            });
            
            return updated;
          } else {
            console.log('‚ùå ƒ∞lgili sipari≈ü customers listesinde bulunamadƒ±:', data.orderId);
            return currentCustomers;
          }
        });
      });
      
      // ƒ∞nceleme durdurulduƒüunda sipari≈ü durumunu g√ºncelle
      socketService.on('order_inspection_stopped', (data: { orderId: number, status: string }) => {
        console.log('üîî ORDER INSPECTION STOPPED Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã ƒ∞nceleme Durdurma Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Sipari≈ü ID:', data.orderId);
        console.log('üìä Yeni Durum:', data.status);
        
        // ƒ∞ncelenen sipari≈üler listesinden √ßƒ±kar
        setInspectingOrders(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.orderId);
          console.log('üóëÔ∏è Sipari≈ü inspectingOrders listesinden √ßƒ±karƒ±ldƒ±:', data.orderId);
          return newSet;
        });
        
        // Eƒüer ≈üu anda incelenen sipari≈ü bu sipari≈ü ise modalƒ± kapat
        if (selectedOrder && selectedOrder.id === data.orderId) {
          console.log('üö™ ƒ∞nceleme modalƒ± kapatƒ±lƒ±yor - sipari≈ü ba≈üka s√ºr√ºc√º tarafƒ±ndan alƒ±ndƒ±:', data.orderId);
          setShowInspectionModal(false);
          setSelectedOrder(null);
          setOrderDetails(null);
        }
        
        // ƒ∞lgili sipari≈üi customers listesinde backend'ten gelen status'e g√ºncelle
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('üîÑ ƒ∞nceleme durduruldu, durum g√ºncellendi:', customer.id, 'Yeni durum:', data.status);
              // Backend'den gelen status deƒüerini direkt kullan
              return { ...customer, status: data.status as Customer['status'] };
            }
            return customer;
          });
          return updated;
        });
      });

      // üîß FIX: Sipari≈ü tekrar m√ºsait olduƒüunda event listener'ƒ±
      socketService.on('order_available_again', (data: { orderId: number }) => {
        console.log('üîî ORDER AVAILABLE AGAIN Bƒ∞LDƒ∞Rƒ∞Mƒ∞ ALINDI:');
        console.log('üìã Tekrar M√ºsait Olma Verisi:', JSON.stringify(data, null, 2));
        console.log('üÜî Sipari≈ü ID:', data.orderId);
        
        // ƒ∞lgili sipari≈üi customers listesinde 'waiting' durumuna g√ºncelle
        setCustomers(prev => {
          const currentCustomers = Array.isArray(prev) ? prev : [];
          const updated = currentCustomers.map(customer => {
            if (customer.id === data.orderId) {
              console.log('‚è≥ Sipari≈ü tekrar bekleme durumuna ge√ßirildi:', customer.id);
              return { ...customer, status: 'waiting' as Customer['status'] };
            }
            return customer;
          });
          return updated;
        });
      });
    }
    
    return () => {
      // Cleanup socket listeners
      socketService.off('connection_error');
      socketService.off('max_reconnect_attempts_reached');
      socketService.off('new_order');
      socketService.off('order_created');
      socketService.off('order_cancelled');
      socketService.off('order_cancelled_by_customer');
      socketService.off('request_location_update');
      socketService.off('order_status_update');
      socketService.off('order_phase_update');
      socketService.off('order_inspection_started');
      socketService.off('order_inspection_stopped');
      socketService.off('order_available_again'); // üîß FIX: Cleanup eklendi
      // Cleanup location watch
      if (locationWatchRef.current) {
        locationWatchRef.current.remove();
      }
      // Cleanup navigation service
      navigationService.stopNavigation();
    };
  }, [token]);

  const loadDriverInfo = async () => {
    try {
      // √ñnce AsyncStorage'dan kaydedilmi≈ü s√ºr√ºc√º bilgilerini oku
      const savedDriverInfo = await AsyncStorage.getItem('driver_info');
      if (savedDriverInfo) {
        const driverData = JSON.parse(savedDriverInfo);
        console.log('AsyncStorage\'dan s√ºr√ºc√º bilgileri y√ºklendi:', driverData);
        setDriverInfo(driverData);
      }

      // Online durumunu AsyncStorage'dan oku
      const savedOnlineStatus = await AsyncStorage.getItem('driver_online_status');
      const shouldBeOnline = savedOnlineStatus === 'true';
      setIsOnline(shouldBeOnline);

      const token = await AsyncStorage.getItem('auth_token');
      if (!token) {
        router.replace('/phone-auth');
        return;
      }

      console.log('API √ßaƒürƒ±sƒ± yapƒ±lƒ±yor:', `${API_CONFIG.BASE_URL}/api/drivers/profile`);
        const response = await fetch(`${API_CONFIG.BASE_URL}/api/drivers/profile`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      console.log('API yanƒ±t durumu:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('API yanƒ±tƒ±:', result);
        
        if (result.success && result.data) {
          console.log('S√ºr√ºc√º bilgileri set ediliyor:', result.data);
          setDriverInfo(result.data);
          // S√ºr√ºc√º bilgilerini AsyncStorage'a kaydet
          await AsyncStorage.setItem('driver_info', JSON.stringify(result.data));
        } else {
          console.log('API yanƒ±tƒ±nda veri yok:', result);
        }
      } else {
        console.log('API yanƒ±t hatasƒ±:', response.status, response.statusText);
        const errorText = await response.text();
        console.log('Hata detayƒ±:', errorText);
      }
    } catch (error) {
      console.log('Error loading driver info:', error);
      // Network error durumunda AsyncStorage'dan y√ºklenen bilgileri kullan
      // Sadece hi√ß bilgi yoksa logout yap
      if (!driverInfo) {
        await logout();
        router.replace('/phone-auth');
      }
    }
  };

  const fetchLaborPrice = async () => {
    try {
      const token = await AsyncStorage.getItem('auth_token');
      if (!token) return;

      const response = await fetch(`${API_CONFIG.BASE_URL}/api/system-settings/labor-price`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.laborPrice) {
          setLaborPrice(result.laborPrice);
        }
      }
    } catch (error) {
      console.error('Error fetching labor price:', error);
      // Hata durumunda varsayƒ±lan deƒüer kullanƒ±lƒ±r (800)
    }
  };

  const requestLocationPermission = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        showModal('Konum ƒ∞zni', 'Konum izni gerekli. L√ºtfen ayarlardan konum iznini a√ßƒ±n.', 'warning');
        return;
      }
      
      // Konum izni alƒ±ndƒ±ktan sonra konum takibini ba≈ülat
      startLocationTracking();
    } catch (error) {
      console.error('Location permission error:', error);
      showModal('Hata', 'Konum izni alƒ±nƒ±rken hata olu≈ütu.', 'error');
    }
  };

  const maskPhoneNumber = (phone: string) => {
    if (!phone || phone.length < 4) return phone;
    const visiblePart = phone.slice(0, -4);
    const maskedPart = '****';
    return visiblePart + maskedPart;
  };

  const makePhoneCall = (phone: string) => {
    const maskedNumber = '0850' + Math.floor(Math.random() * 9000000 + 1000000);
    Linking.openURL(`tel:${maskedNumber}`);
  };

  const startLocationTracking = async () => {
    try {
      // ƒ∞lk konumu al
      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
      });
      
      const newLocation = {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        latitudeDelta: 0.0922,
        longitudeDelta: 0.0421,
      };
      
      setCurrentLocation(newLocation);
      
      // Socket ile konum g√∂nder
      if (socketService.isSocketConnected()) {
        socketService.updateLocation({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          heading: location.coords.heading || 0,
        });
      }
      
      // Konum takibini ba≈ülat (her 5 saniyede bir g√ºncelle)
      locationWatchRef.current = await Location.watchPositionAsync(
        {
          accuracy: Location.Accuracy.High,
          timeInterval: 5000, // 5 saniye
          distanceInterval: 5, // 5 metre
        },
        (location) => {
          const newLocation = {
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
            latitudeDelta: 0.0922,
            longitudeDelta: 0.0421,
          };
          
          setCurrentLocation(newLocation);
          
          // Socket ile konum g√∂nder - isOnline kontrol√ºn√º kaldƒ±rdƒ±k
          if (socketService.isSocketConnected()) {
            console.log('Konum g√ºncelleniyor:', {
              latitude: location.coords.latitude,
              longitude: location.coords.longitude,
              heading: location.coords.heading || 0,
            });
            
            socketService.updateLocation({
              latitude: location.coords.latitude,
              longitude: location.coords.longitude,
              heading: location.coords.heading || 0,
            });
          } else {
            console.log('Socket baƒülantƒ±sƒ± yok, konum g√∂nderilemedi');
          }
        }
      );
    } catch (error) {
      console.error('Location tracking error:', error);
      showModal('Hata', 'Konum takibi ba≈ülatƒ±lƒ±rken hata olu≈ütu.', 'error');
    }
  };

  const loadCustomers = async () => {
    try {
      if (!token) {
        console.log('Token bulunamadƒ±, bekleyen sipari≈üler y√ºklenemedi');
        return;
      }

      if (!currentLocation) {
        console.log('Konum bilgisi bulunamadƒ±, bekleyen sipari≈üler y√ºklenemedi');
        return;
      }

      console.log('Bekleyen sipari≈üler y√ºkleniyor...');
      
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/orders/pending`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Bekleyen sipari≈üler ba≈üarƒ±yla y√ºklendi:', data);
        
        if (data.success && data.orders && Array.isArray(data.orders)) {
          // API'den gelen sipari≈üleri Customer formatƒ±na d√∂n√º≈üt√ºr
          const pendingCustomers: Customer[] = data.orders.map((order: any) => ({
            id: order.id || Date.now() + Math.random(),
            name: order.customer && order.customer.firstName && order.customer.lastName 
              ? `${order.customer.firstName} ${order.customer.lastName}` 
              : order.customerName || 'M√º≈üteri',
            phone: order.customer && order.customer.phone 
              ? order.customer.phone 
              : order.customerPhone || 'Bilinmiyor',
            pickup_location: order.pickupAddress,
            destination: order.destinationAddress,
            distance: order.distance ? `${order.distance.toFixed(1)} km` : 'Hesaplanƒ±yor...',
            estimated_fare: order.estimatedPrice,
            status: order.order_status,
            created_at: order.created_at || new Date().toISOString(),
          }));
          
          // Mevcut customers listesini g√ºncelle
          setCustomers(pendingCustomers);
          console.log(`${pendingCustomers.length} bekleyen sipari≈ü y√ºklendi`);
        } else {
          console.log('Bekleyen sipari≈ü bulunamadƒ±');
          setCustomers([]);
        }
      } else {
        const errorData = await response.json();
        console.error('Bekleyen sipari≈üler y√ºklenirken hata:', errorData);
        
        // S√ºr√ºc√º konumu bulunamadƒ± veya s√ºr√ºc√º aktif deƒüil hatasƒ± i√ßin √∂zel mesaj
        if (errorData.error === "S√ºr√ºc√º konumu bulunamadƒ± veya s√ºr√ºc√º aktif deƒüil") {
          showModal('√áevrimdƒ±≈üƒ± Durum', '√áevrimdƒ±≈üƒ± olduƒüunuzda yeni sipari≈üleri listeleyemezsiniz.', 'error');
        } else {
          showModal('Hata', errorData.message || 'Bekleyen sipari≈üler y√ºklenirken bir hata olu≈ütu.', 'error');
        }
      }
    } catch (error) {
      console.error('Bekleyen sipari≈üler y√ºklenirken hata:', error);
      showModal('Baƒülantƒ± Hatasƒ±', 'Sunucuya baƒülanƒ±rken bir hata olu≈ütu. L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin.', 'error');
    }
  };

  const refreshCustomers = useCallback(async () => {
    setIsRefreshing(true);
    await loadCustomers();
    setIsRefreshing(false);
  }, []);

  const toggleOnlineStatus = async () => {
    try {
      const newStatus = !isOnline;
      
      // Backend'de s√ºr√ºc√º durumunu g√ºncelle
      if (token) {
        const response = await fetch(`${API_CONFIG.BASE_URL}/api/drivers/status`, {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            is_active: newStatus,
            is_available: newStatus
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'S√ºr√ºc√º durumu g√ºncellenirken hata olu≈ütu');
        }

        console.log('S√ºr√ºc√º durumu backend\'de g√ºncellendi:', { is_active: newStatus, is_available: newStatus });
      }
      
      if (newStatus) {
        // Online olduƒüunda socket baƒülantƒ±sƒ±nƒ± kur ve m√ºsaitlik durumunu g√ºncelle
        if (token) {
          await socketService.connect(token);
        }
        if (socketService.isSocketConnected()) {
          socketService.updateAvailability(newStatus);
        }
        // Online olduƒüunda konum takibini ba≈ülat
        await startLocationTracking();
        // Online durumunu AsyncStorage'da sakla
        await AsyncStorage.setItem('driver_online_status', 'true');
      } else {
        // Offline olduƒüunda √∂nce socket disconnect yap
        if (socketService.isSocketConnected()) {
          socketService.goOffline(); // Bu fonksiyon socket'i disconnect edecek
        }
        // Offline olduƒüunda konum takibini durdur
        if (locationWatchRef.current) {
          locationWatchRef.current.remove();
          locationWatchRef.current = null;
        }
        // Offline durumunu AsyncStorage'da sakla
        await AsyncStorage.setItem('driver_online_status', 'false');
      }
      
      setIsOnline(newStatus);
      
      showModal(
        'Durum G√ºncellendi',
        newStatus ? 'Artƒ±k √ßevrimi√ßisiniz ve konum takibi ba≈ülatƒ±ldƒ±' : '√áevrimdƒ±≈üƒ± oldunuz ve baƒülantƒ± kesildi',
        'success'
      );
    } catch (error) {
      console.error('Toggle online status error:', error);
      showModal('Hata', error instanceof Error ? error.message : 'Durum g√ºncellenirken hata olu≈ütu.', 'error');
    }
  };

  const acceptCustomer = (customerId: number) => {
    showModal(
      'M√º≈üteriyi Kabul Et',
      'Bu m√º≈üteriyi kabul etmek istediƒüinizden emin misiniz?',
      'warning',
      [
        { text: 'ƒ∞ptal', style: 'cancel' },
        {
          text: 'Kabul Et',
          onPress: () => {
            // Socket √ºzerinden sipari≈ü kabul et (varsayƒ±lan 1 hammal ile)
            socketService.acceptOrderWithLabor(customerId, 1);
          },
        },
      ]
    );
  };

  const inspectOrder = async (order: Customer) => {
    try {
      // S√ºr√ºc√º offline modda iken sipari≈ü incelemesini engelle
      if (!isOnline) {
        showModal('√áevrimdƒ±≈üƒ± Durum', '√áevrimdƒ±≈üƒ± olduƒüunuzda sipari≈ü inceleyemezsiniz. L√ºtfen √∂nce √ßevrimi√ßi olun.', 'warning');
        return;
      }
      
      setLoadingDetails(true);
      setSelectedOrder(order);
      
      // Socket baƒülantƒ±sƒ±nƒ± kontrol et
      console.log('üîç Socket baƒülantƒ± durumu:', socketService.isSocketConnected());
      console.log('üîç Socket ID:', socketService.getSocketId());
      
      // Socket √ºzerinden inceleme ba≈ülat
      const inspectResult = socketService.inspectOrder(order.id);
      console.log('üîç inspectOrder sonucu:', inspectResult);
      
      // ƒ∞ncelenen sipari≈üler listesine ekle
      setInspectingOrders(prev => new Set([...prev, order.id]));
      
      // Sipari≈ü detaylarƒ±nƒ± al
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/orders/${order.id}/details`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Sipari≈ü detaylarƒ± API yanƒ±tƒ±:', JSON.stringify(data, null, 2));
        setOrderDetails(data.order);
        // API'den gelen labor_count deƒüerini laborCount state'ine set et
        if (data.order?.labor_count) {
          setLaborCount(data.order.labor_count.toString());
        }
      } else {
        const errorData = await response.json();
        console.error('‚ùå Sipari≈ü detaylarƒ± API hatasƒ±:', errorData);
      }
      
      setShowInspectionModal(true);
    } catch (error) {
      console.error('Sipari≈ü inceleme hatasƒ±:', error);
      showModal('Hata', 'Sipari≈ü detaylarƒ± y√ºklenirken bir hata olu≈ütu.', 'error');
    } finally {
      setLoadingDetails(false);
    }
  };

  const stopInspecting = (orderId: number) => {
    // Socket √ºzerinden incelemeyi durdur
    socketService.stopInspectingOrder(orderId);
    
    // ƒ∞ncelenen sipari≈üler listesinden √ßƒ±kar
    setInspectingOrders(prev => {
      const newSet = new Set(prev);
      newSet.delete(orderId);
      return newSet;
    });
    
    // Sipari≈üin durumunu pending'e g√ºncelle
    setCustomers(prev => {
      const currentCustomers = Array.isArray(prev) ? prev : [];
      const updated = currentCustomers.map(customer => {
        if (customer.id === orderId) {
          console.log('üîÑ ƒ∞nceleme durduruldu, durum pending\'e g√ºncellendi:', customer.id);
          return { ...customer, status: 'pending' as Customer['status'] };
        }
        return customer;
      });
      return updated;
    });
    
    setShowInspectionModal(false);
    setSelectedOrder(null);
    setOrderDetails(null);
  };

  const acceptOrderWithLabor = (orderId: number, laborCount: number) => {
    // Zaten bekliyorsak tekrar g√∂nderme
    if (isWaitingForCustomerApproval || pendingOrderId) {
      console.log('‚ö†Ô∏è acceptOrderWithLabor: Zaten m√º≈üteri onayƒ± bekleniyor, tekrar g√∂nderme engellendi');
      return;
    }
    
    // Socket √ºzerinden hammaliye ile kabul et
    socketService.acceptOrderWithLabor(orderId, laborCount);
    
    // M√º≈üteri onayƒ± bekleme durumuna ge√ß
    setIsWaitingForCustomerApproval(true);
    setPendingOrderId(orderId);
    
    // Sipari≈ü detaylarƒ±nƒ± sakla ama aktif sipari≈üi hen√ºz ayarlama
    if (orderDetails) {
      console.log('üìç acceptOrderWithLabor: S√ºr√ºc√º kabul etti, m√º≈üteri onayƒ± bekleniyor:', orderId);
      
      // Sipari≈ü detaylarƒ±nƒ± sakla (sonra kullanƒ±lacak)
      setPendingOrderDetails(orderDetails);
    } else {
      console.error('‚ùå acceptOrderWithLabor: orderDetails null veya undefined');
    }
  };

  const updateOrderStatus = (orderId: number, status: 'started' | 'completed') => {
    const statusText = status === 'started' ? 'Y√ºk Alƒ±ndƒ±' : 'Teslim Edildi';
    const confirmText = status === 'started' ? 'Y√ºk√º aldƒ±ƒüƒ±nƒ±zƒ± onaylƒ±yor musunuz?' : 'Y√ºk√º teslim ettiƒüinizi onaylƒ±yor musunuz?';
    
    showModal(
      statusText,
      confirmText,
      'warning',
      [
        { text: 'ƒ∞ptal', style: 'cancel' },
        {
          text: 'Onayla',
          onPress: () => {
            // Socket √ºzerinden sipari≈ü durumu g√ºncelle
            socketService.updateOrderStatus(orderId, status);
            
            // A≈üamalƒ± rota sistemini g√ºncelle
            if (status === 'started' && activeOrder && activeOrder.id === orderId) {
              // Y√ºk alƒ±ndƒ± - delivery fazƒ±na ge√ß
              setCurrentPhase('delivery');
              // Varƒ±≈ü noktasƒ±na rota √ßiz
              getDirectionsRoute(
                currentLocation,
                {
                  latitude: activeOrder.destinationLatitude,
                  longitude: activeOrder.destinationLongitude
                }
              );
            } else if (status === 'completed') {
              // Teslimat tamamlandƒ± - rotayƒ± temizle
              setActiveOrder(null);
              setCurrentPhase(null);
              setRouteCoordinates([]);
              setIsNavigating(false);
            }
            
            showModal('Ba≈üarƒ±lƒ±', `Sipari≈ü durumu g√ºncellendi: ${statusText}`, 'success');
          },
        },
      ]
    );
  };

  // Backend API ile rota hesaplama
  const calculateRouteFromAPI = useCallback(async (orderId: number, phase: 'pickup' | 'delivery') => {
    try {
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/orders/route`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          orderId,
          phase
        })
      });

      const data = await response.json();
      
      if (data.success && data.route) {
        const { coordinates, distance, duration, instructions } = data.route;
        
        // Koordinatlarƒ± harita formatƒ±na √ßevir
        const routePoints = coordinates.map((coord: [number, number]) => ({
          latitude: coord[0],
          longitude: coord[1]
        }));
        
        setRouteCoordinates(routePoints);
        setRouteDuration(duration); // saniye cinsinden
        
        // Haritayƒ± rotaya odakla
        if (mapRef.current && routePoints.length > 0) {
          mapRef.current.fitToCoordinates(routePoints, {
            edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },
            animated: true,
          });
        }
        
        return { success: true, route: data.route };
      } else {
        console.error('Rota hesaplama hatasƒ±:', data.error);
        showModal('Hata', data.error || 'Rota hesaplanamadƒ±', 'error');
        return { success: false, error: data.error };
      }
    } catch (error) {
      console.error('Rota hesaplama hatasƒ±:', error);
      showModal('Hata', 'Rota hesaplanamadƒ±', 'error');
      return { success: false, error: 'Network error' };
    }
  }, [token, showModal]);

  // Google Directions API ile rota √ßizimi (fallback)
  const getDirectionsRoute = useCallback(async (origin: {latitude: number, longitude: number}, destination: {latitude: number, longitude: number}) => {
    try {
      const GOOGLE_MAPS_API_KEY = 'AIzaSyBh078SvpaOnhvq5QGkGJ4hQV-Z0mpI81M';
      
      const originStr = `${origin.latitude},${origin.longitude}`;
      const destinationStr = `${destination.latitude},${destination.longitude}`;
      
      const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${originStr}&destination=${destinationStr}&key=${GOOGLE_MAPS_API_KEY}&mode=driving&departure_time=now&traffic_model=best_guess`;
      
      const response = await fetch(url);
      const data = await response.json();
      
      if (data.status === 'OK' && data.routes.length > 0) {
        const route = data.routes[0];
        const leg = route.legs[0];
        
        // Polyline decode etme
        const points = decodePolyline(route.overview_polyline.points);
        setRouteCoordinates(points);
        
        // S√ºre bilgisini kaydet
        setRouteDuration(leg.duration.value); // saniye cinsinden
        
        // Haritayƒ± rotaya odakla
        if (mapRef.current) {
          const coordinates = [origin, destination];
          mapRef.current.fitToCoordinates(coordinates, {
            edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },
            animated: true,
          });
        }
      }
    } catch (error) {
      console.error('Rota √ßizimi hatasƒ±:', error);
    }
  }, []);

  // M√º≈üteri onayƒ± geldiƒüinde aktif sipari≈üi ba≈ülat
  const startActiveOrderAfterCustomerApproval = useCallback((orderId: number) => {
    if (pendingOrderDetails && pendingOrderId === orderId) {
      console.log('‚úÖ M√º≈üteri onayƒ± geldi, aktif sipari≈ü ba≈ülatƒ±lƒ±yor:', orderId);
      
      // Koordinatlarƒ± kontrol et ve varsayƒ±lan deƒüerler kullan
      const pickupLat = pendingOrderDetails.pickupLatitude ?? 41.0082; // Istanbul default
        const pickupLng = pendingOrderDetails.pickupLongitude ?? 28.9784; // Istanbul default
      const deliveryLat = pendingOrderDetails.destination_latitude ?? 41.0082; // Istanbul default
      const deliveryLng = pendingOrderDetails.destination_longitude ?? 28.9784; // Istanbul default
      
      console.log('üìç startActiveOrderAfterCustomerApproval koordinatlarƒ±:', {
        pickupLat, pickupLng, deliveryLat, deliveryLng,
        originalPickupLat: pendingOrderDetails.pickupLatitude,
          originalPickupLng: pendingOrderDetails.pickupLongitude,
        originalDeliveryLat: pendingOrderDetails.destination_latitude,
        originalDeliveryLng: pendingOrderDetails.destination_longitude
      });
      
      const newActiveOrder: OrderData = {
        id: orderId,
        pickupAddress: pendingOrderDetails.pickup_address || '',
        pickupLatitude: pickupLat,
          pickupLongitude: pickupLng,
          destinationAddress: pendingOrderDetails.destination_address,
          destinationLatitude: deliveryLat,
          destinationLongitude: deliveryLng,
        laborCount: pendingOrderDetails.laborCount || 0,
        estimatedPrice: pendingOrderDetails.estimated_price || 0,
        customerId: pendingOrderDetails.customer_id || 0,
        customerName: pendingOrderDetails.customer_name,
        customerPhone: pendingOrderDetails.customer_phone
      };
      
      setActiveOrder(newActiveOrder);
      setCurrentPhase('pickup');
      setIsWaitingForCustomerApproval(false);
      setPendingOrderId(null);
      setPendingOrderDetails(null);
      
      // Y√ºk alma noktasƒ±na rota √ßiz - currentLocation kontrol√º ile
      if (currentLocation && currentLocation.latitude && currentLocation.longitude) {
        getDirectionsRoute(
          currentLocation,
          {
            latitude: pickupLat,
            longitude: pickupLng
          }
        );
      } else {
        // Konum bilinmiyorsa, varsayƒ±lan konumu kullan
        const defaultLocation = {
          latitude: 41.0082,
          longitude: 28.9784
        };
        getDirectionsRoute(
          defaultLocation,
          {
            latitude: pickupLat,
            longitude: pickupLng
          }
        );
      }
    } else {
      console.error('‚ùå startActiveOrderAfterCustomerApproval: pendingOrderDetails yok veya orderId uyu≈ümuyor');
    }
  }, [pendingOrderDetails, pendingOrderId, currentLocation, getDirectionsRoute]);
  
  // Polyline decode fonksiyonu
  const decodePolyline = (encoded: string) => {
    const points = [];
    let index = 0;
    const len = encoded.length;
    let lat = 0;
    let lng = 0;
    
    while (index < len) {
      let b;
      let shift = 0;
      let result = 0;
      do {
        b = encoded.charAt(index++).charCodeAt(0) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      const dlat = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));
      lat += dlat;
      
      shift = 0;
      result = 0;
      do {
        b = encoded.charAt(index++).charCodeAt(0) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      const dlng = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));
      lng += dlng;
      
      points.push({
        latitude: lat / 1e5,
        longitude: lng / 1e5,
      });
    }
    
    return points;
  };
  
  // Navigasyonu ba≈ülat
  const startNavigation = useCallback(async () => {
    if (!activeOrder || !currentLocation) {
      showModal('Hata', 'Aktif sipari≈ü veya konum bilgisi bulunamadƒ±', 'error');
      return;
    }

    // Zaten navigasyon ba≈ülatƒ±lmƒ±≈üsa tekrar ba≈ülatma
    if (isNavigating) {
      console.log('Navigasyon zaten aktif, tekrar ba≈ülatƒ±lmƒ±yor');
      return;
    }

    console.log('üß≠ Navigasyon ba≈ülatƒ±lƒ±yor...', {
      orderId: activeOrder.id,
      currentPhase: currentPhase,
      currentLocation: currentLocation
    });

    setIsNavigating(true);
    
    try {
      let destination;
      let destinationAddress;
      
      if (currentPhase === 'pickup') {
        // Y√ºk alma fazƒ±nda - y√ºk konumuna git
        destination = {
          latitude: activeOrder.pickupLatitude,
            longitude: activeOrder.pickupLongitude
        };
        destinationAddress = activeOrder.pickupAddress;
      } else {
        // Teslimat fazƒ±nda - varƒ±≈ü noktasƒ±na git
        destination = {
          latitude: activeOrder.destinationLatitude,
            longitude: activeOrder.destinationLongitude
        };
        destinationAddress = activeOrder.destinationAddress;
      }
      
      console.log('üìç Hedef:', destination);
      
      // Backend API ile rota hesapla
      let routeCalculated = false;
      
      if (currentPhase) {
        console.log('üó∫Ô∏è Backend API ile rota hesaplanƒ±yor...');
        const routeResult = await calculateRouteFromAPI(activeOrder.id, currentPhase);
        
        if (routeResult.success && routeResult.route) {
          console.log('‚úÖ Backend rota hesaplandƒ±:', routeResult.route);
          
          // Backend'den gelen rotayƒ± navigation service'e ayarla
          try {
            // Navigation service'e rotayƒ± ayarla (sadece origin ve destination)
            await navigationService.calculateRoute(currentLocation, destination);
            routeCalculated = true;
            console.log('‚úÖ Navigation service rota ayarlandƒ±');
          } catch (calcError) {
            console.error('‚ùå Navigation service rota ayarlama hatasƒ±:', calcError);
          }
        } else {
          console.warn('‚ö†Ô∏è Backend rota hesaplamasƒ± ba≈üarƒ±sƒ±z, Google Directions API kullanƒ±lƒ±yor');
        }
      }
      
      // Eƒüer backend rota hesaplamadƒ±ysa veya currentPhase null ise Google Directions API kullan
      if (!routeCalculated) {
        console.log('üó∫Ô∏è Google Directions API ile rota hesaplanƒ±yor...');
        await getDirectionsRoute(currentLocation, destination);
        
        // Google Directions'dan gelen veriyi navigation service'e aktar
        // Bu durumda basit bir rota olu≈üturalƒ±m
        if (routeCoordinates.length > 0) {
          console.log('‚úÖ Google Directions rota alƒ±ndƒ±, navigation service ayarlanƒ±yor...');
          
          const simpleSteps = [{
            instruction: `${destinationAddress} konumuna gidin`,
            maneuver: 'straight',
            location: destination,
            distance: routeDuration ? routeDuration * 30 : 300 // Yakla≈üƒ±k mesafe hesabƒ±, null check
          }];
          
          try {
            // Navigation service'e rotayƒ± Google Directions verisiyle ayarla
            // calculateRoute sadece 2-3 parametre alƒ±r: origin, destination, waypoints
            // simpleSteps'ƒ± ayrƒ±ca ayarlamamƒ±z gerekecek
            await navigationService.calculateRoute(currentLocation, destination);
            
            // Navigation service'e manuel adƒ±mlarƒ± ekle
            const currentRoute = navigationService.getCurrentRoute();
            if (currentRoute && simpleSteps.length > 0) {
              currentRoute.steps = simpleSteps.map(step => ({
                instruction: step.instruction,
                distance: `${step.distance}m`,
                duration: Math.round(step.distance / 30), // Yakla≈üƒ±k s√ºre
                maneuver: step.maneuver,
                location: step.location
              }));
            }
            routeCalculated = true;
            console.log('‚úÖ Navigation service Google rotasƒ± ayarlandƒ±');
          } catch (calcError) {
            console.error('‚ùå Navigation service Google rota ayarlama hatasƒ±:', calcError);
          }
        } else {
          console.error('‚ùå Google Directions rota alƒ±namadƒ±');
        }
      }
      
      // Rota hesaplandƒ±ysa navigasyonu ba≈ülat
      if (routeCalculated) {
        console.log('üöÄ Navigation service ba≈ülatƒ±lƒ±yor...');
        
        // Navigasyon servisini ba≈ülat ve g√ºncellemeleri dinle
        await navigationService.startNavigation(currentLocation, (update: NavigationUpdate) => {
          console.log('üì° Navigation update:', update);
          setNavigationUpdate(update);
        });
        
        // Sunucuya s√ºr√ºc√ºn√ºn navigasyonu ba≈ülattƒ±ƒüƒ±nƒ± bildir
        try {
          if (activeOrder?.id) {
            console.log('üì£ Emitting driver_started_navigation for order:', activeOrder.id);
            socketService.driverStartedNavigation(activeOrder.id);
          }
        } catch (emitError) {
          console.error('driver_started_navigation emit error:', emitError);
        }
        
        console.log('‚úÖ Navigasyon ba≈üarƒ±yla ba≈ülatƒ±ldƒ±');
      } else {
        throw new Error('Rota hesaplanamadƒ±, navigasyon ba≈ülatƒ±lamƒ±yor');
      }
      
    } catch (error) {
      console.error('‚ùå Navigasyon ba≈ülatma hatasƒ±:', error);
      showModal('Hata', 'Navigasyon ba≈ülatƒ±lamadƒ±', 'error');
      setIsNavigating(false);
    }
  }, [activeOrder, currentLocation, currentPhase, calculateRouteFromAPI, getDirectionsRoute, showModal, isNavigating, routeCoordinates, routeDuration]);
  
  const handleLogout = async () => {
    showModal(
      '√áƒ±kƒ±≈ü Yap',
      '√áƒ±kƒ±≈ü yapmak istediƒüinizden emin misiniz?',
      'warning',
      [
        { text: 'ƒ∞ptal', style: 'cancel' },
        {
          text: '√áƒ±kƒ±≈ü Yap',
          onPress: async () => {
            // Navigasyonu durdur
            navigationService.stopNavigation();
            await logout();
            router.replace('/phone-auth');
          },
        },
      ]
    );
  };

  // Navigasyon g√ºncellemelerini i≈üle
  const handleNavigationUpdate = (update: NavigationUpdate) => {
    setNavigationUpdate(update);
    
    // Rota s√ºresini g√ºncelle
    if (update.timeToDestination) {
      setRouteDuration(update.timeToDestination);
    }
    
    // Hedefe ula≈üƒ±ldƒ± mƒ± kontrol et
    if (update.distanceToDestination && update.distanceToDestination < 50) {
      // 50 metre yakla≈üƒ±ldƒ±
      console.log('üéØ Hedefe yakla≈üƒ±ldƒ±:', update.distanceToDestination, 'metre');
    }
  };

  const renderCustomerItem = ({ item }: { item: Customer }) => {
    const getStatusColor = (status: string) => {
      switch (status) {
        case 'pending': return '#FFD700';
        case 'accepted': return '#FFD700';
        case 'confirmed': return '#10B981';
        case 'in_progress': return '#3B82F6';
        case 'completed': return '#6B7280';
        case 'inspecting': return '#F59E0B';
        default: return '#FFD700';
      }
    };

    const getStatusText = (status: string) => {
      switch (status) {
        case 'pending': return 'Bekliyor';
        case 'accepted': return 'Kabul Edildi';
        case 'confirmed': return 'Onaylandƒ±';
        case 'in_progress': return 'Devam Ediyor';
        case 'completed': return 'Tamamlandƒ±';
        case 'inspecting': return 'ƒ∞nceleniyor';
        default: return 'Bekliyor';
      }
    };

    return (
      <View style={styles.customerCard}>
        <View style={styles.customerHeader}>
          <View>
            <Text style={styles.customerName}>{item.name}</Text>
            <Text style={styles.customerPhone}>{maskPhoneNumber(item.phone)}</Text>
          </View>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(item.status) }]}>
            <Text style={styles.statusText}>{getStatusText(item.status)}</Text>
          </View>
        </View>
        
        <View style={styles.locationInfo}>
          <View style={styles.locationRow}>
            <Ionicons name="location" size={16} color="#FFD700" />
            <Text style={styles.locationText}>Alƒ±≈ü: {item.pickup_location}</Text>
          </View>
          <View style={styles.locationRow}>
            <Ionicons name="flag" size={16} color="#EF4444" />
            <Text style={styles.locationText}>Varƒ±≈ü: {item.destination}</Text>
          </View>
        </View>
        
        <View style={styles.fareInfo}>
          <Text style={styles.distanceText}>{item.distance}</Text>
          <Text style={styles.fareText}>‚Ç∫{item.estimated_fare}</Text>
        </View>
        
        {item.status === 'pending' && (
          <TouchableOpacity
            style={[styles.actionButton, styles.inspectButton, { marginHorizontal: 0 }]}
            onPress={() => inspectOrder(item)}
            disabled={inspectingOrders.has(item.id)}
          >
            <Ionicons name="eye" size={16} color="#FFFFFF" />
            <Text style={styles.actionButtonText}>
              {inspectingOrders.has(item.id) ? 'ƒ∞nceleniyor...' : 'ƒ∞ncele'}
            </Text>
          </TouchableOpacity>
        )}
        
        {item.status === 'inspecting' && (
          <View style={[styles.actionButton, { backgroundColor: '#F59E0B', marginHorizontal: 0 }]}>
            <Ionicons name="eye" size={16} color="#FFFFFF" />
            <Text style={styles.actionButtonText}>ƒ∞nceleme Devam Ediyor</Text>
          </View>
        )}
        
        {item.status === 'confirmed' && (
          <View style={styles.actionButtonsContainer}>
            <TouchableOpacity
              style={[styles.actionButton, styles.startButton]}
              onPress={() => updateOrderStatus(item.id, 'started')}
            >
              <Ionicons name="checkmark-circle" size={20} color="#FFFFFF" />
              <Text style={styles.actionButtonText}>Y√ºk Aldƒ±m</Text>
            </TouchableOpacity>
          </View>
        )}
        
        {item.status === 'in_progress' && (
          <View style={styles.actionButtonsContainer}>
            <TouchableOpacity
              style={[styles.actionButton, styles.completeButton]}
              onPress={() => updateOrderStatus(item.id, 'completed')}
            >
              <Ionicons name="flag" size={20} color="#FFFFFF" />
              <Text style={styles.actionButtonText}>Teslim Ettim</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <StatusBar style="light" />
      
      {/* Hamburger Menu Button */}
      <TouchableOpacity
        style={styles.hamburgerButton}
        onPress={() => router.push('/driver-menu')}
      >
        <Ionicons name="menu" size={24} color="#FFFFFF" />
      </TouchableOpacity>

      {/* Online/Offline Status Toggle */}
      <View
        style={{
          position: 'absolute',
          top: 60,
          right: 20,
          zIndex: 1000,
          elevation: 5,
          shadowColor: '#000',
          shadowOffset: { width: 0, height: 2 },
          shadowOpacity: 0.25,
          shadowRadius: 4,
        }}
      >
        <ToggleButton
          isOn={isOnline}
          onToggle={toggleOnlineStatus}
          onColors={['#10B981', '#34D399']}
          offColors={['#EF4444', '#F87171']}
          size="medium"
        />
      </View>

      {/* Navigasyon Durum G√∂stergesi */}
      {isNavigating && navigationUpdate && (
        <View style={styles.navigationStatusContainer}>
          <View style={styles.navigationStatusContent}>
            <Ionicons name="navigate" size={20} color="#FFFFFF" />
            <View style={styles.navigationStatusText}>
              <Text style={styles.navigationStatusTitle}>
                {navigationUpdate.currentStep?.maneuver || 'Navigasyon devam ediyor'}
              </Text>
              <Text style={styles.navigationStatusSubtitle}>
                Hedefe: {Math.round(navigationUpdate.distanceToDestination)}m ‚Ä¢ {navigationUpdate.timeToDestination}dk
              </Text>
            </View>
          </View>
        </View>
      )}

      {/* Map */}
      <MapComponent
        region={mapRegion}
        driverLocation={currentLocation}
        routeCoordinates={routeCoordinates}
        activeOrder={activeOrder}
        currentPhase={currentPhase || 'pickup'}
        isNavigating={isNavigating}
        onStartNavigation={() => startNavigation()}
        onRegionChange={(region) => setMapRegion(region)}
        onNavigationUpdate={handleNavigationUpdate}
      />

      {/* Aktif Sipari≈ü Kartƒ± - Hide when waiting for customer approval */}
      {activeOrder && currentPhase && !isWaitingForCustomerApproval && (
        <ActiveOrderCard
          activeOrder={activeOrder}
          currentPhase={currentPhase}
          routeDuration={routeDuration || undefined}
          onPickupComplete={handlePickupComplete}
          onDeliveryComplete={handleDeliveryComplete}
        />
      )}

      {/* Navigation Button - Hide when waiting for customer approval */}
      {activeOrder && !isWaitingForCustomerApproval && (
        <TouchableOpacity
          style={styles.navigationButton}
          onPress={() => startNavigation()}
        >
          <Ionicons name="navigate" size={20} color="#FFFFFF" />
          <Text style={styles.navigationButtonText}>Navigasyon</Text>
        </TouchableOpacity>
      )}

      {/* Customer List */}
      <CustomerList 
        customers={customers}
        onInspectOrder={inspectOrder}
        onUpdateOrderStatus={(orderId, status) => {
          // Status g√ºncelleme i≈ülemi
          console.log('Status update:', orderId, status);
        }}
        inspectingOrders={inspectingOrders}
        maskPhoneNumber={(phone) => phone.replace(/(\d{3})\d{4}(\d{3})/, '$1****$2')}
        onRefresh={refreshCustomers}
        isRefreshing={isRefreshing}
        isOnline={isOnline}
        isWaitingForCustomerApproval={isWaitingForCustomerApproval}
      />



        {/* Sipari≈ü ƒ∞nceleme Modalƒ± */}
        <OrderInspectionModal
          visible={showInspectionModal}
          selectedOrder={selectedOrder}
          orderDetails={orderDetails}
          laborCount={laborCount}
          laborPrice={laborPrice}
          onLaborCountChange={setLaborCount}
          onClose={() => selectedOrder && stopInspecting(selectedOrder.id)}
          onAccept={acceptOrderWithLabor}
          onOpenPhotoModal={openPhotoModal}
          styles={styles}
          isWaitingForCustomerApproval={isWaitingForCustomerApproval}
        />

        {/* Fotoƒüraf Modal */}
        <PhotoModal
          visible={photoModalVisible}
          photoUrls={photoUrls}
          currentImageIndex={currentImageIndex}
          onClose={closePhotoModal}
          onImageIndexChange={handleImageIndexChange}
        />

        {/* Yeni Sipari≈ü Bildirim Modalƒ± */}
        <NewOrderNotificationModal
          visible={showNewOrderModal}
          onClose={() => setShowNewOrderModal(false)}
          onViewOrder={() => {
            setShowNewOrderModal(false);
            // Yeni sipari≈ü geldiƒüinde direkt inceleme moduna ge√ß
            if (newOrderData) {
              // newOrderData'yi Customer formatƒ±na √ßevir
              const customerOrder: Customer = {
                id: newOrderData.id || 0,
                name: newOrderData.customerName || newOrderData.customer_first_name + ' ' + newOrderData.customer_last_name,
                phone: newOrderData.customerPhone || '',
                pickup_location: newOrderData.pickupAddress,
                destination: newOrderData.destinationAddress,
                estimated_fare: newOrderData.estimatedPrice || 0,
                distance: String(newOrderData.distance || 0),
                status: 'pending' as Customer['status'],
                created_at: new Date().toISOString()
              };
              inspectOrder(customerOrder);
            }
          }}
          orderData={newOrderData}
        />

        {/* Sipari≈ü ƒ∞ptal Bildirim Modalƒ± */}
        <OrderCancellationModal
          visible={showCancellationModal}
          orderData={cancellationData}
          onClose={() => {
            setShowCancellationModal(false);
            setCancellationData(null);
          }}
        />


      </View>
    );
  }